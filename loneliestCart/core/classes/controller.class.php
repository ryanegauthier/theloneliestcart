<?PHP
	//*****************************************************************************************************************************************
	/**
	*
	* ZLCMS :: Zipline Content Management System
	* 
	* PHP versions 5
	*
	* Copyright (c) 2010 Zipline Communications Inc.
	* 
	* LICENSE:
	* 
	* This is a licensed product created by Zipline Communications Inc. exclusively for our clients.
	* Zipline Communications Inc. maintains complete ownership of all source code, concepts, and methodologies.  
	* This product is licensed on a per domain basis and may not be used for other perposes without
	* direct approval from Zipline Communications Inc.  For information regarding this 
	* system or to purchase a license please call: 1-866-440-3158.
	* 
	* @package    ZLCMS
	* @author     Ryan Stemkoski <ryan@ziplineinteractive.com>
	* @copyright  2012 Zipline Communications Inc.
	* @version    2.1
	* @link       http://www.ziplineinteractive.com
	*/
	//*****************************************************************************************************************************************
	class controller {
		
		/**
		* This variable contains an array of URL segments.  These are built by exploding the / in the URL and turning each contained item into an array.
		*/
		var $segments = array();
		
		/**
		* This variable contains all of the configuration data loaded from the configuration file and database.
		*/
		var $connect = array();
		
		/**
		* This variable contains an array of error messages generated by the ZLCMS system.
		*/
		var $error = array();
		
		/**
		* Boolean value indicating if the site is in debug mode or not.  This variable is set from data contained within the configuration file.
		*/
		var $debug = "";
		
		/**
		* This variable is filled with the email address of the developer for use when handling debug related email messages.
		*/
		var $developer = "";
		
		/**
		* This variable contains the base directory calculated from the configuration file data.
		*/
		var $base = "http://theloneliestcart.gauthierdevelopment.net/";
		
		/**
		* This variable is the database object used by the database abstraction layer.
		*/
		var $db;
		
		
		//*************************************************************************************************************************************
		/**
		* This method is the primary class constructor.  This method does 3 important tasks.  First, it loads the configuration data from the configuration file creating a number of variables.  Second, it uses this information to create a database connection.  Third, it uses triggers the debug function which uses the configuration data to set debug mode.
		*/
		//*************************************************************************************************************************************
		public function __construct() {	
		
			//LETS LOAD OUR CONFIGURATION
			require("core/database/db_func.php");
			
			//SET THE CONFIG VAR
			$this->set_connect($connect);
			
			//ATTEMPT TO MAKE A DATABASE CONNECTION
			$this->load_database(); 
		
			//DETERMINE IF WE'RE RUNNING IN DEBUG MODE OR NOT. IF SO THEN EMAILS ETC GO TO DEVELOPER
			$this->debug();
		
		}
		
		//*************************************************************************************************************************************
		/**
		* This method serves as a trigger to fire a number of sub methods to help prepare the ZLCMS system to render a page. It uses the URL to find the correct company configuration from the database and then it prepares the configuration and subclasses for use. 
		* @param $url A string representing the current website URL determined automatically through the server object.
		* @param $uri A string that represents the current URI. This is determined by getting the variable url which is automatically crated to contain the entire URI from the webiste. (Requires .htaccess entry to set url variable)
		* @uses create_segments()
		* @uses set_base_values()
		*/
		//*************************************************************************************************************************************
		public function initiate($url,$uri) {
			//CREATE URL SEGMENTS
			$this->create_segments($uri);
					
			//THIS FUNCTION AUTO LOADS CLASSES USED WITHIN THE APPLICATION
			$this->auto_load_classes();
			
			//LOAD UP AND CREATE THE BASE VALUES
			$this->set_path_values($url);
		}
				
		//*************************************************************************************************************************************
		/**
		* The ZLCMS loads all subpackages before all ZLCMS variables are loaded.  Due to this the system offers a separate method called plugin_construct designed to function as a constructor for plugin functions should one be required.  Plugin classes are not prevented from having their own constructors but should they need access to the ZLCMS system for database queries or other functions the developer should use this method instead of a standard constructor. This code loops through each plugin folder and looks in each subclass for a function called plugin_construct() if found it will attempt to execute it.  
		* @uses $this->config['plugins'] An array contining the initiated plugins. Plugins can be initiated by adding them to the comma separated list in the zlcms_config table.
		*/
		//*************************************************************************************************************************************
		public function class_construct() {
			$classes = array("content","form","image","mail");
			foreach($classes as $class) {
				if(class_exists($class)) {
					if(method_exists($this->$class,"class_construct")) {
						$this->$class->class_construct();
					}
				} 
			}
		}

		//*************************************************************************************************************************************
		/**
		* This method is used by the system to determine what main template file to load.  If mobile is turned on in the zlcms_config this method will use the mobile_detect class to determine if the user is using a mobile device or not.  If they are, it will load the mobile template and if they are not or if mobile is turned off the default template file will be loaded.  
		* @uses $mobile_detect The mobile detect object contained in the tools folder.
		* @uses $this->config['mobile_version'] A boolean value indicating if the company has mobile turned on or not
		* @uses log_error();
		*/
		//*************************************************************************************************************************************

		public function load_template() {

		  if(is_file("core/template.php")) {
			  include("core/template.php");
		  } else {
			  $this->log_error("This website has no template. Please create a template to begin to show output.");
		  }
	
		}

		//*************************************************************************************************************************************
		/**
		* Creates a thunmail image using the image helper class and outputs it to the browser.  This method is for use in resizing images on the fly.
		*/
		//*************************************************************************************************************************************	
		protected function create_thumbnail($original="",$width="",$height="",$ratio=true) {
			
			//IMPORT GLOBAL ZLCMS
			global $controller;
			
			if(!empty($controller->image)) {
				$controller->image->resize(str_replace("../","",$original),$width,$height,$ratio);
			} else {
				$controller->log_error("The image class is not initiated so your request can not be completed");
			}		
			
		}

		//*************************************************************************************************************************************
		/**
		* This method is very important to the ZLCMS system. It is used to process $_GET and $_POST requests within plugins.  The process_request() function loops through each plugin searching for a process_request() match. It passes a variable called action between them allowing a developer to catch the action and use it to trigger a method within a class. 
		* @param string $action Action is a value of the $_GET / $_POST request called action. Any form or URL that requires special processing can use $_GET to execute within the processing functions.
		* @uses $this->database['plugins'] An array contining the initiated plugins. Plugins can be initiated by adding them to the comma separated list in the zlcms_config table.
		*/
		//*************************************************************************************************************************************
		public function process_request($action) {
						
			//LOAD PLUGIN PROCESS FUNCTIONS IF THEY EXIST.  HEY ARE LOADED IN ORDER OF THE ARRAY
			if(!empty($action)) {
			
				if($action == "thumb") {
					$this->create_thumbnail(@$_GET['original'],@$_GET['width'],@$_GET['height'],@$_GET['ratio']);
					die;
				} else if($action == "css") {
					$this->css(@$_GET['mobile']); 
					die;
				} else if($action == "img"){
					$this->img();
					die;
				} else if($action == "javascript") {
					$this->javascript(@$_GET['mobile']); 
					die;	
				} else {
					
				}
				
			}	
		}		

		//*************************************************************************************************************************************
		/**
		* This method slices the URI into querystring style variables called segments.  The first segment is reserved for the current page and all other segments can be used for plugins and other page construction activities. 
		*/
		//*************************************************************************************************************************************
		protected function create_segments($uri) {

			if(!empty($uri)) {
				$this->segments = explode("/",$uri);
			} else {
				$this->segments[0] = "";
			}	
					
		}

		//*************************************************************************************************************************************
		/**
		* Ports the ZLCMS configuration values into the ZLCMS class for easy use within functions
		* @param $connect An array contianing the configuration data from configuration file located at /configuration/configuration.inc.php
		*/
		//*************************************************************************************************************************************
		protected function set_connect($connect) {
			$this->connect = $connect;
		}
		
		//*************************************************************************************************************************************
		/**
		* This method automatically loads classes that are listed in the database library, plugin, or helper sections of the zlcms_config database table. Each class will be initiated automatically by the is function and will become part of the global ZLCMS object.   
		* @uses $this->config An array containing the configuration variables used to determine if a class should be loaded.
		*/
		//*************************************************************************************************************************************

		protected function auto_load_classes() {
		
			//TYPES OF CLASSES WE CAN ATTEMPT TO AUTOLOAD
			$classes = array("content","form","image","mail");
				
			foreach($classes as $class) {
				if(!empty($class)) {
					if(is_file("core/classes/{$class}.class.php")) {
						require("core/classes/{$class}.class.php");
						$class = str_replace("-","",$class);
						$this->$class = new $class;
					} else {
						$this->log_error("Could not load class: {$class}");
					}
				}
			}
		}

		//*************************************************************************************************************************************
		/**
		* Checks to see if the current page needs to be secure or not then sets the base and template_path variables accordingly. 
		* 
		* Sets $this->plugins_path
		*
		* Sets $this->plugins_path_relative
		*
		* Sets $this->files_path
		*
		* Sets $this->files_path_relative
		* 
		* Sets $this->templates_path
		*
		* Sets $this->templates_path_relative
		*
		* Sets $this->mobile_templates_path
		*
		* Sets $this->mobile_templates_path_relative
		*
		* @uses array $this->config An array containing the configuration data for use within the ZLCMS class.
		* @uses array $this->segments An array containing information about the URL being loaded.		
		*/
		//*************************************************************************************************************************************
		protected function set_path_values($url) {
			
			//GLOBAL ZLCMS
			global $controller;
						
			//STYLES PATH
			$this->styles_path = $this->base . 'core/styles';
			$this->styles_path_relative = "core/styles";

			//VIEWS PATH
			$this->includes_path = $this->base . 'core/includes';
			$this->includes_path_relative = "core/includes";

			//VIEWS PATH
			$this->views_path = $this->base . 'core/views';
			$this->views_path_relative = "core/views";

			//IMAGES PATH
			$this->images_path = $this->base . 'core/images';
			$this->images_path_relative = "core/images";
			
			
		}

		//*************************************************************************************************************************************
		/**
		* Creates the database connection and then initiates the database class making it available to all plugins and classes.
		* @uses $this->connect An array containing the configuration data for use within the ZLCMS class.
		*/
		//*************************************************************************************************************************************
		protected function load_database() {

			//CHECK TO SEE IF WE NEED TO CONNECT
			if(!empty($this->connect['hostname']) && !empty($this->connect['database']) && !empty($this->connect['database_username']) && !empty($this->connect['database_password'])) {
				
				include("core/database/db.inc.php");
				include("core/database/database.class.php");
								
				$this->db = $db;
				$this->database = new database();
	
			} else {
				$this->log_error("Please provide database connection details in the db_func file.");
				die;
			}
		
		}
	
		//*************************************************************************************************************************************
		/**
		* This method is used to toggle the debug status of the website based on the value indicated in the configuration file. 
		* @uses $this->config An array containing the configuration data for use within the ZLCMS class.
		* @uses $this->developer A variable that is set by this function using data from the configuration file. 
		*/
		//*************************************************************************************************************************************
		protected function debug() {
			
			//IF DEBUG ISN'T SET THEN SET IT TO FALSE 
			if($this->connect['debug'] == true) {
				$this->debug = true;
			} else {
				$this->debug = false;
			}
			
			//SET THE DEVELOPER EMAIL FROM CONFIG
			$this->developer = $this->connect['debug_developer'];
			
		}
				
		//*************************************************************************************************************************************
		/**
		* This method is used to log errors to into the error array.  The error array can be used to store system and user related error messages for later display.   
		* @param $error A mixed variable that will accept a string error message or an array of string error messages and it will automatically add them to a system wide error array.
		*/
		//*************************************************************************************************************************************
		public function log_error($error) {
			if(is_array($error)) {
				foreach($error as $errors) {
					$this->error[] = $errors;
				}
			} else {
				$this->error[] = $error;
			}
		}		
		
		//********************************************************************************************************************
		/**
		* This is a friendly function to return the class of the currently active company to use in accesing corresponding directories. 
		* This function is used heavily in the ZLCMS system. It automatically structures links for use within the ZLCMS system.
		*
		* @param $id Numerical value reprsenting the database value of the page to be linked to.
		* @param $url Optional string value representing an internal or extermal URL to link to redirect to.
		* @param $title Page Title used to create search friendly URL. Spaces and invalid characters are automatically parsed out by this function.
		* @param $special Used as an optional param for special pages that neeed an additional ID or value.
		* @return An Array $link that contains two values address and target tobe used to crate links in HTML.
		*/
		//********************************************************************************************************************
		public function build_link($permalink,$url="") {
			
			//OPEN VARIABLE AND ARRAY FOR USE
			$link = array("");
			
			//OUTPUT
			$output = "";
		
			//CHECK TO SEE IF URL IS PRESENT. IF IT IS THEN WE WILL LINK TO IT
			if(!empty($url)) {
				
				preg_match("^http^",$url,$show);
				if($show) {
					$link['address'] = $url;
					$link['target'] = "_blank";
				} else {
					$link['address'] = $url;
					$link['target'] = "_self";
				}
	
			
			//IF THERE ISNT A URL SPECIFIED
			} else {
			
				//START OUTPUT
				$output = $this->base;
			
				//IF PERMALINK IS ARRAY
				if(is_array($permalink)) {
					foreach($permalink as $item) {
						$output .= $this->permalink($item) . "/";
					}
				} else {
					if($permalink == "home") {
						$output = "/";
					} else {
						$output .= $this->permalink($permalink) . "/";
					}
				}
				
				$link['address'] = $output;
				$link['target'] = "_self";
				
			}
			
			//RETURN THE LINK ARRAY FOR USE ON THE SITE
			return $link;
		}

		//*************************************************************************************************************************************
		/**
		* This function will build a permalink from the text input.  It also includes an optional parameter that allows it to be output or returned
		* @param $text Text string that will be turned into a valid URL
		* @param $return Value representing if the function should return the results or if it should output them directly to the browser
		*/
		//*************************************************************************************************************************************	
		public function permalink($text, $return = true) {
			
			//IMPORT GLOBAL ZLCMS
			global $controller;
			
			//CLEAR OUTPUT FOR USE
			$output = "";
			
			//SETS THE LOCALE
			setlocale(LC_ALL, 'en_US.UTF8');
			
			//CREATES REQUIRED VARIABLES
			$replace = array();
			$delimiter = "-";
			$str = "";
			
			if(!empty($replace)) {
				$text = str_replace((array)$replace, ' ', $text);
			}

			//CLEAN URL
			$clean = iconv('UTF-8', 'ASCII//TRANSLIT', $text);
			$clean = preg_replace("/[^a-zA-Z0-9\/_|+ -]/", '', $clean);
			$clean = strtolower(trim($clean, '-'));
			$clean = preg_replace("/[\/_|+ -]+/", $delimiter, $clean);	
			
			//REMOVE TRAILING DASH
			$last = substr($clean, -1);
			if($last == "-") {
				$clean = substr($clean,0,-1);
			} 	
	
			//RETURN OR OUTPUT
			if($return == "true") {
				return $clean;
			} else {
				echo($clean);
			}
			
		}

		
		//*************************************************************************************************************************************
		/**
		* This method grabs plugin js (plugin.front.js) and the standard 'javascript.js' in includes. A cache file is created and updated whenever a change in the scanned js files exists
		* @author http://verens.com/2008/05/20/efficient-js-minification-using-php/ modified by Josh Minor
		* @version 1.25 (Last Change: Added additional 't' script parameter)
		* @param $mobile A boolean value that indicates if this is a mobile instance of the script or not.
		* @param $_GET['e'] string Include extra file. Name only, no extension (e.g. &e=foobar) Extras need to be placed in /includes
		* @param $_GET['t'] string Include this file only. Name only, no extension (e.g. &t=foobar) Only works for /includes files
		* @return JS combined and minified
		*/
		//*************************************************************************************************************************************	
		public function javascript($mobile = false){
			
			global $controller;
			
			//CLEAR JS FOR USE
			$js = '';
			
			// Set cache folder
			$cache = $controller->files_path_relative.'cache/';
			
			// Make cache folder if non-existant
			if(!is_dir($cache)){
				mkdir($cache,0777,true);
				@chmod($cache,0777);
			}
			
			//DETERMINE IF WE SHOULD LOAD THE MOBILE OR TRADITIONAL CSS
			if(@$mobile == true) {
				$js_directory = $this->mobile_templates_path_relative;
				$leader = "mobile_";
				$name = 'mobile';
			} else {
				$js_directory = $this->templates_path_relative;
				$leader = "";
				$name = 'standard';
			}
			
			
			$cache_file = $cache . $name . '.js';
			$cache_time = @filemtime($cache_file); // Determine the last cache save time
			$changed = (file_exists($cache_file)) ? 0 : 1; // If the cache file doesn't exist, set changed to 1, so a new cache is created
			
			//JOIN IN ANY ADDED FIELDS THAT ARE REQUITED BY SCRIPTS ON THE PAGE
			if(!empty($_GET['items'])) {
				if(is_array($_GET['items'])) {
					foreach($_GET['items'] as $item) {
						if(is_file($js_directory .'includes/' . $item .'.js')) {
							if(filemtime($js_directory  .'includes/' . $item .'.js') >= $cache_time){ // Check if a scanned file is modified since last cache
								$changed = 1; // Count the changed file
								@touch($js_directory  .'includes/' . $item .'.js'); // If a file has been modified, touch it so it matches new cache
							}
							$js .= file_get_contents($js_directory .'includes/' . $item .'.js');
						}
					}
				}
			}
			
			//LOAD PLUGINS
			$dir = "core/plugins/";
			if(is_dir($dir)) {
				if($dh = opendir($dir)) {
					$count=0;
					while(($folder = readdir($dh)) !== false) {
						if(is_dir($dir . $folder)) {
							if(is_file($dir . $folder . "/front/" . $folder . ".front.js")) {
								if(filemtime($dir . $folder . "/front/" . $folder . ".front.js") >= $cache_time){ // Check if a scanned file is modified since last cache
									$changed = 1;; // Count the changed file
									@touch($dir . $folder . "/front/" . $folder . ".front.js"); // If a file has been modified, touch it so it matches new cache
								}
								$js .= file_get_contents($this->database['core_path'] . $this->database['plugins_path'] . $folder . "/front/" . $folder . '.front.js');
							} 
						} $count++;
					}
					closedir($dh);
				}
			}	
			
			if($changed == 0){
				$this->output_js($cache_file); die;
			} else{
				
				//IMPORT THE JSMIN TOOL
				$this->load_class("jsmin","tools");
				
				//USE JSMIN TO MINIFY THE OUTPUT AND RETURN CLEAN OUTPUT
				$output = $this->jsmin->minify($js);

//WONT USE JSMIN TO MINIFY THE OUTPUT AND RETURN CLEAN OUTPUT - DEBUG ONLY
/* 				$output = $js; */

				
				$file = fopen($cache_file,'w');
				fwrite($file,$output);
				fclose($file);
				$this->output_js($cache_file);
			}
		}
		
		//*************************************************************************************************************************************
		/**
		* This function is used to ouput a JS file from supplied code.
		* @param $file A string of Javascript to include in the file. 
		*/
		//*************************************************************************************************************************************	
		function output_js($file){
			
			//SET INFORMATION
			$lastModified	= filemtime($file); // Check that cache file hasn't been modified
			$etagFile		= md5_file($file);	// md5 check that file matches
			$etagHeader		= (isset($_SERVER['HTTP_IF_NONE_MATCH'])	? trim($_SERVER['HTTP_IF_NONE_MATCH'])	: false); // Verify that the md5 matches cache file
			
			//BUILD HEADERS
			header("Last-Modified: ".gmdate("D, d M Y H:i:s", $lastModified)." GMT"); // Set last modified to file time
			header('Expires: '.gmdate('D, d M Y H:i:s \G\M\T', time() + (3600 * 24 * 7)));
			header("Etag: $etagFile"); // Set md5 header
			header('Cache-Control: public'); // Allow cache control
			
			if (@strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) == $lastModified || @$_SERVER['HTTP_IF_NONE_MATCH'] == $etagFile){ // If cache file has not been modifed, set 304
				header("HTTP/1.1 304 Not Modified"); // Set 304
				exit;
			} else {
				header("Content-type: application/javascript; charset: UTF-8");
				readfile($file);
				die;
			}
		}
		
		
		//*************************************************************************************************************************************
		/**
		* CSS Combo-minifing-cachematic: This method grabs the core stylesheets (text.css & format.css) and any plugin stylesheets and combines and minifies plugin style sheets can be company specific by prepending the company_id to the css file name (e.g. 1.presentation.front.css). A cache file is created and updated whenever a change in the scanned css files exists.
		* @author Josh Minor
		* @version 1.1
		* @param $mobile A boolean value that indicates if this is a mobile instance of the script or not
		* @return CSS combined and minified
		*/
		//*************************************************************************************************************************************	
		public function css($mobile = false){
			
			global $controller;
		
			//CLEAR CSS FOR USE
			$css = "";
			
			//OPTIONAL, CAN BE USED TO LOAD A SPECIFIC FILE BY HAND
			$specific = (isset($_GET['css_file'])) ? $_GET['css_file'] : false;
			
			//SET PATH TO CACHE FOLDER
			$cache = $controller->files_path_relative.'cache/';
			
			//CHECK TO SEE IF CACHE EXISTS. IF NOT, WE WILL CREATE IT AND ATTEMPT TO PROVIDE WRITE PERMS
			if(!is_dir($cache)){
				mkdir($cache,0777,true);
				@chmod($cache,0777);
			}
			
			
			//DETERMINE IF WE SHOULD LOAD THE MOBILE OR TRADITIONAL CSS
			if(@$mobile == true) {
				$template_path = $this->mobile_templates_path_relative;
				$css_directory = $template_path . 'style/';
				$leader = "mobile_";
				$name = 'mobile';
			} else {
				$template_path = $this->templates_path_relative;
				$css_directory = $template_path .'style/';
				$leader = "";
				$name = 'standard';
			}
			
			//SET CACHE FILE
			$cache_file = $cache . $name . '.css'; // Set cache file and directory
			$cache_time = @filemtime($cache_file); // Determine the last cache save time
			$changed = (file_exists($cache_file)) ? 0 : 1; // If the cache file doesn't exist, set changed to 1, so a new cache is created
			

			//IF THE FORMAT CSS FILE EXISTS LOAD IT
			if(!empty($_GET['items'])) {
				if(is_array($_GET['items'])) {
					foreach($_GET['items'] as $item) {
						if(is_file($css_directory . $item . '.css')) {
							$css .= "\**BREAK**\\"; // Line break
							$css .= file_get_contents($css_directory . $item . '.css');
							if(filemtime($css_directory.$item .'.css') >= $cache_time){ // Check if a scanned file is modified since last cache
								$changed = 1;// Count the changed file
								@touch($css_directory. $item .'.css'); // If a file has been modified, touch it so it matches new cache (files must be 777, otherwise touch is ignored)
							}
						}
					}
				}
			}
			
			
			//LOAD PLUGINS
			$dir = "core/plugins/";
			if(is_dir($dir)) {
				if($dh = opendir($dir)) {
					$count=0;
					while(($folder = readdir($dh)) !== false) {
						if(is_dir($dir . $folder)) {
							if(is_file($dir . $folder . "/front/" . $folder . ".front.css")) {
								if(filemtime($dir . $folder . "/front/" . $folder . ".front.css") >= $cache_time){ // Check if a scanned file is modified since last cache
									$changed = 1;; // Count the changed file
									@touch($dir . $folder . "/front/" . $folder . ".front.css"); // If a file has been modified, touch it so it matches new cache
								}
								$css .= file_get_contents($this->database['core_path'] . $this->database['plugins_path'] . $folder . "/front/" . $folder . '.front.css');
							} 
						} $count++;
					}
					closedir($dh);
				}
			}
			

			if($changed == 0){ // If no files have been modifed, output cache file
				$this->output_css($cache_file); die; // Output file
			} else{ // If files have been modified, generate new cache file and output
			
				//CLEAN THE CSS OF COMMENTS, SPACES AND OTHER FORMATTING
				$css = preg_replace( '#\s+#', ' ', preg_replace( '#/\*.*?\*/#s', '', preg_replace( '#\s+#', ' ', preg_replace( '#/\*.*?\*/#s', '', $css)))); // Regex to remove comments
				$css = str_replace( '; ', ';', str_replace( ': ', ':', str_replace( ' {', '{', str_replace( '{ ', '{', str_replace( ', ', ',', str_replace( '} ', '}', str_replace( ';}', '}', $css)))))));
				$css = str_replace("\**BREAK**\\", "", $css); // Parse line breaks
				
				//REPLACE LOCAL PATHS WITH A CLEAN REALITVE PATH
				$css = str_replace( '../',$template_path, $css );
				
				//REMOVE ANY WHITESPACE IN THE CSS
				$css = trim($css);
				
				$file = fopen($cache_file,'w');
				fwrite($file,$css);
				fclose($file);
				@chmod($cache,0777); // Allow user delete
				
				//OUTPUT THE COMPLETED FILE
				$this->output_css($cache_file);
			}	
		}
		
		//*************************************************************************************************************************************
		/**
		* This function is used to ouput a CSS file from supplied code.
		* @param $file A string of CSS to include in the file. 
		*/
		//*************************************************************************************************************************************	
		private function output_css($file) {
			
			// Set Cache Headers
			$lastModified	= filemtime($file); // Check that cache file hasn't been modified
			$etagFile		= md5_file($file);	// md5 check that file matches
			
			//BUILD THE DOCUMENT HEADERS
			header("Last-Modified: ".gmdate("D, d M Y H:i:s", $lastModified)." GMT"); // Set last modified to file time
			header('Expires: '.gmdate('D, d M Y H:i:s \G\M\T', time() + (3600 * 24 * 7)));
			header("Etag: $etagFile"); // Set md5 header
			header('Cache-Control: public'); // Allow cache control
			
			//DETERMINE IF FILE HAS BEEN MODIFIED IF SO 
			if (@strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE'])==$lastModified || @$_SERVER['HTTP_IF_NONE_MATCH'] == $etagFile){ // If cache file has not been modifed, set 304
				header("HTTP/1.1 304 Not Modified"); // Set 304
				exit;
			} else {
				header("Content-type: text/css; charset: UTF-8");
				readfile($file);
				die;
			}
		}
		
		
		//*************************************************************************************************************************************
		/**
		* Gets source image, scales proportionately and sets quality, stores image into cache, shows file if cache exists. If no source specified, it outputs a box with the dimensions overlaid, All paramaters are optional.
		* @author Josh Minor
		* @version 1.09 (Last change: Added auto cache folder creation)
		* @param $_GET['x'] Specify image width, defaults to original image size
		* @param $_GET['y'] Specify image height, defaults to original image size
		* @param $_GET['q'] 0-100 JPEG quality (ignored for other filetypes), defaults to 70
		* @param $_GET['p'] Plugin name to set file path for (e.g. 'presentation' for /core/files/company/presentation)
		* @param $_GET['t'] Toggle template path (e.g. /core/templates/company/web) No value needed, just set (e.g. &t)
		* @param $_GET['gray'] 1-100 Set color desaturation, 1 being fully grayscale, 100 being full color. Defaults to full color
		* @param $_GET['download'] Triggers attachment headers to tell browser to process as download. Value sets download name.
		* @param $_GET['crop'] Any value, toggle crop to fit dimensions exactly, requires both x AND y to be set
		* @return A a .jpg .png or .gif image.
		*/
		//*************************************************************************************************************************************	
		public function img(){
			global $controller;
			
			// Set cache folder
			$cacheFolder = $controller->files_path_relative.'cache/';
			
			// Make cache folder if non-existant
			if(!is_dir($cacheFolder)){
				mkdir($cacheFolder,0777,true);
				@chmod($cacheFolder,0777);
			}
			
			$filename = (isset($_GET['src'])) ? $_GET['src'] : false; // Check that source is set
			$gray = (isset($_GET['gray'])) ? $_GET['gray'] : false;
			$crop = (isset($_GET['crop'])) ? true : false;
			
			// Get file extension
			$parts = pathinfo(@$_GET['src']);
			$extension = (isset($parts['extension'])) ? strtolower($parts['extension']): '.png';
			
			// Strip non-alphanumeric and '.' 
			$stripsrc = (isset($_GET['src'])) ? preg_replace('/\W/', '', $_GET['src']) : '';
			
			// Set cache name
			$fullname = $cacheFolder.@$_GET['p'].@$_GET['x'].@$_GET['y'].@$_GET['q'].@$_GET['gray'].$stripsrc;
			
			
				
			if(isset($_GET['download'])){
				$dname = ($_GET['download']!='') ? $_GET['download'] : @$_GET['x'].@$_GET['y'].$stripsrc;
				header('Content-Disposition: attachment; filename="'.$dname.'"');
			}
			
			// Check if cache exists
			if(file_exists($fullname) && @$_GET['src'] != ''){
				// Set Cache Headers
				$lastModified=filemtime($fullname); // If cache file has not been modifed, set 304
				$etagFile = md5_file($fullname); // Get md5 of file
				$ifModifiedSince=(isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? $_SERVER['HTTP_IF_MODIFIED_SINCE'] : false); // Check if Modified Since has been set
				$etagHeader=(isset($_SERVER['HTTP_IF_NONE_MATCH']) ? trim($_SERVER['HTTP_IF_NONE_MATCH']) : false); 
	
				header("Last-Modified: ".gmdate("D, d M Y H:i:s", $lastModified)." GMT"); // Set Last Modified header
				header('Expires: '.gmdate('D, d M Y H:i:s \G\M\T', time() + (3600 * 24 * 30)));

				header("Etag: $etagFile"); // Set Etag validation to MD5
				header('Cache-Control: public'); // Allow public cache control
				if (@strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE'])==$lastModified || $etagHeader == $etagFile){ // Check if has been modified
					header("HTTP/1.1 304 Not Modified"); // Set 304 if no change
					exit;
				}
				
				// Get the cached file
				file_get_contents($fullname);
				
				// Set content type
				switch($extension):
					
					// JPG
					case 'jpg':
						$type = 'jpg';
						header('Content-Type: image/jpeg');
						break;
					case 'jpeg':
						$type = 'jpg';
						header('Content-Type: image/jpeg');
						break;
						
					// GIF
					case 'gif':
						$type = 'gif';
						header('Content-Type: image/gif');
					
					// PNG
					case 'png';
						$type = 'png';
						header('Content-Type: image/png');
						break;
						
					// OTHER
					default:
						echo "Wrong image type";
						die;
				endswitch;
			};
			
			// Check for 'p' and 't' and set plugin path accordingly
			if($filename){
				$filename = (isset($_GET['p'])) ? $controller->file->show_image($_GET['p'], @$_GET['src'], true) : $filename;
				$filename = (isset($_GET['t'])) ? $controller->templates_path_relative.'images/'.$filename : $filename;
			}
			if(substr($filename,0,7)!='http://' && substr($filename,0,8)!='https://'){ // Skip file existance check for external sources
				$filename = (file_exists($filename) && is_file($filename)) ? $filename : false; // Check that source is valid file
			}
			// If source is missing or invalid, output filler image
			if(!$filename){
			
				$width	= (isset($_GET['x'])) ? $_GET['x'] : 200; // If no dimensions are specified, default to 200
				$height = (isset($_GET['y'])) ? $_GET['y'] : 200; // If no dimensions are specified, default to 200
				$topline = (isset($_GET['src'])) ? 'Invalid Source' : ''; // Top line of text, src if set
				$string = (isset($_GET['s'])) ? $_GET['s'] : $width.'x'.$height; // Text to be overlaid
				
				$font_size = 5; // Font size (1-5);
				
				header ('Content-Type: image/png'); // Use png for clearer text
			
				$im = imagecreatetruecolor($width, $height);
				$bg = imagecolorallocate($im, 200, 200, 200); // Define background color
				imagefill($im, 0, 0, $bg);	// Set background
				$text_color = imagecolorallocate($im, 20, 20, 255); // Define text color
				
				$center_x = ceil( ( imagesx($im) - ( imagefontwidth($font_size) * strlen($string) ) ) / 2 ); // Center text horizontally
				$center_x2 = ceil( ( imagesx($im) - ( imagefontwidth($font_size) * strlen($topline) ) ) / 2 ); // Center text horizontally
				$center_y = ceil( ( ( imagesy($im) - ( imagefontheight($font_size) * 1 ) ) / 2)  + ( (1-1) * imagefontheight($font_size) ) ); // Center text vertically
				
				imagestring($im, $font_size, $center_x, $center_y,  $string, $text_color); // Overlay text
				imagestring($im, $font_size, $center_x2, $center_y-25,  $topline, $text_color); // Overlay text
				imagepng($im); // Create image
				imagedestroy($im);
				die;
			}
			
			list($width_orig, $height_orig) = getimagesize($filename); // Get original dimensions
			
			// Set a maximum height and width and quality
			$width	= (isset($_GET['x'])) ? $_GET['x'] : $width_orig; // If no dimensions are specified, default to original file dimensions
			$height = (isset($_GET['y'])) ? $_GET['y'] : $height_orig; // If no dimensions are specified, default to original file dimensions
			$q 		= (isset($_GET['q'])) ? $_GET['q'] : 70; // If no quality is set, default to 70

			// Content type
			switch($extension):
				
				// JPG
				case 'jpg':
					$type = 'jpg';
					header('Content-Type: image/jpeg');
					break;
				case 'jpeg':
					$type = 'jpg';
					header('Content-Type: image/jpeg');
					break;
					
				// GIF
				case 'gif':
					$type = 'gif';
					header('Content-Type: image/gif');
				break;
				// PNG
				case 'png';
					$type = 'png';
					header('Content-Type: image/png');
					break;
					
				// OTHER
				default:
					echo "Wrong image type";
					die;
			endswitch;

			// Get new dimensions			
			$ratio_orig = $width_orig/$height_orig; // Calculate ratio
			
			if($crop && isset($_GET['x']) && isset($_GET['y'])){
				$crop_ratio = $_GET['x']/$_GET['y'];
				if ($ratio_orig >= $crop_ratio){
				   $height = $_GET['y'];
				   $width = $width_orig / ($height_orig / $_GET['y']);
				} else{
				   $width = $_GET['x'];
				   $height = $height_orig / ($width_orig / $_GET['x']);
				}
				$image_p = imagecreatetruecolor($_GET['x'], $_GET['y']);
			} else{
				if($width/$height > $ratio_orig){
					$width = $height*$ratio_orig;
				} else {
					$height = $width/$ratio_orig;
				}
				$image_p = imagecreatetruecolor($width, $height);
			} 
			
			switch($type):
				case 'jpg':
					$image = imagecreatefromjpeg($filename);
					
					if($crop){
						imagecopyresampled($image_p, $image, 0-($width-$_GET['x'])/2, 0-($height-$_GET['y'])/2, 0, 0, $width, $height, $width_orig, $height_orig);
					} else{
						imagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $width_orig, $height_orig);
					}
					
					if($gray){
						imagecopymergegray($image_p, $image, 0, 0, 0, 0, $width, $height, $gray);
					} 
					// Save cache file
					imagejpeg($image_p, $fullname, $q);
					// Show image
					imagejpeg($image_p, null, $q);
					break;
					
				case 'gif':
					$image = imagecreatefromgif($filename);
					imagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $width_orig, $height_orig);
					if($gray){
						imagecopymergegray($image_p, $image, 0, 0, 0, 0, $width, $height, $gray);
					} 
					// Save cache file
					imagegif($image_p, $fullname);
					// Show image
					imagegif($image_p, null);
					break;
					
				case 'png';	
					$image = imagecreatefrompng($filename);
					
					// Allow alpha channel
					imagealphablending( $image_p, false );
					imagesavealpha( $image_p, true );
					
					// Apply scale and resampling
					imagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $width_orig, $height_orig);
					if($gray){
						imagecopymergegray($image_p, $image, 0, 0, 0, 0, $width, $height, $gray);
					} 
					
					// Save cache file
					imagepng($image_p, $fullname, 9);
					// Show image
					imagepng($image_p, null);
					break;
			endswitch;
			
			// Free image from memory
			imagedestroy($image_p);
		}

		//*************************************************************************************************************************************
		/**
		* Closes the datase connection at the end of the page load
		* @uses $db An object that contains the databse connection information.
		*/
		//*************************************************************************************************************************************	

		public function close_database() {
			
			//CLOSE THE DB OBJECT
			$this->db->close();
		
		}
		
	}

?>